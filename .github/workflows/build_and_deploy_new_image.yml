# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS.

name: Build_and_Deploy_new_Image

on:
  workflow_dispatch:

env:
  AWS_REGION: 'eu-north-1'                    # set this to your preferred AWS region, e.g. eu-north-1
  ECR_REPOSITORY: frontend-service             # set this to your Amazon ECR repository name
  ECS_SERVICE: front-service                   # set this to your Amazon ECS service name
  ECS_CLUSTER: frontend-cluster                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: frontend_td             # set this to the path to your Amazon ECS task definition file
  CONTAINER_NAME: front-container              # set this to the name of the container in the containerDefinitions section of your task definition
  REACT_APP_API_URL: 'https://server.devrate.org'
  REACT_APP_WS_URL: 'wss://server.devrate.org'


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.11.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Set environment variables with defaults
        run: |
          echo "REACT_APP_API_URL=${{ env.REACT_APP_API_URL }}" >> .env
          echo "REACT_APP_WS_URL=${{ env.REACT_APP_WS_URL }}" >> .env

      - run: npm ci
      - run: npm run build --if-present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Get current Task Definition
        id: get-task-def
        run: |
          aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition' \
          --output json > task-def.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-def.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Send notification to Slack
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "GitHub Action (FrontEnd): New brunch is deploying to AWS! Status: ${{ job.status }}.\nTriggered by: ${{ github.actor }}\nBranch: ${{ github.ref }}"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
